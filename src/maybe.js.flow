// @flow

export type Maybe<A> = Just<A> | Nothing

type AnyVal = number | boolean | string | Object

declare class Just<A> {
  filter(p: (_: A) => boolean): Maybe<A>;
  flatMap<B: AnyVal>(f: (_: A) => Maybe<B>): Maybe<B>;
  foreach<B>(f: (_: A) => B): void;
  isJust(): boolean;
  isNothing(): boolean;
  just(): A;
  map<B: AnyVal>(f: (_: A) => B): Maybe<B>;
  orJust<B>(value: B): A;
}

declare class Nothing {
  filter<A>(p: (_: A) => boolean): Nothing;
  flatMap<A, B: AnyVal>(f: (_: A) => Maybe<B>): Nothing;
  foreach<A, B>(f: (_: A) => B): void;
  isJust(): boolean;
  isNothing(): boolean;
  just(): void;
  map<A, B: AnyVal>(f: (_: A) => B): Nothing;
  orJust<B>(value: B): B;
}

declare export function just<T>(value: AnyVal): Just<T>;

declare export function maybe<T>(value: ?T): Maybe<T>;

declare export var nothing: Nothing;
